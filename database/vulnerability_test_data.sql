-- Script de datos espec√≠ficos para testing de vulnerabilidades
-- Aplicaci√≥n TodoList Vulnerable - Prop√≥sito Educativo
-- Este script crea datos espec√≠ficamente dise√±ados para probar cada vulnerabilidad

-- ============================================================================
-- DATOS PARA TESTING DE INYECCI√ìN SQL
-- ============================================================================

-- Usuario espec√≠fico para testing de SQL injection
INSERT INTO users (username, password, email) VALUES 
('sqli_tester', 'password', 'sqli@test.com')
ON CONFLICT (username) DO NOTHING;

-- Obtener el ID del usuario sqli_tester
DO $$
DECLARE
    sqli_user_id INTEGER;
BEGIN
    SELECT id INTO sqli_user_id FROM users WHERE username = 'sqli_tester';
    
    -- Tareas con payloads de SQL injection comunes
    INSERT INTO tasks (user_id, title, description, completed) VALUES 
    (sqli_user_id, 'Basic SQL Injection', ''' OR ''1''=''1', false),
    (sqli_user_id, 'Union Based Injection', ''' UNION SELECT null,username,password,null,null,null,null FROM users--', false),
    (sqli_user_id, 'Boolean Based Blind', ''' AND (SELECT COUNT(*) FROM users) > 0--', false),
    (sqli_user_id, 'Time Based Blind', ''' AND (SELECT pg_sleep(5))--', false),
    (sqli_user_id, 'Error Based Injection', ''' AND CAST((SELECT COUNT(*) FROM users) AS int) > 0--', false),
    (sqli_user_id, 'Stacked Queries', '''; INSERT INTO tasks (user_id, title) VALUES (1, ''Hacked'');--', false);
END $$;

-- ============================================================================
-- DATOS PARA TESTING DE XSS (Cross-Site Scripting)
-- ============================================================================

-- Usuario espec√≠fico para testing de XSS
INSERT INTO users (username, password, email) VALUES 
('xss_tester', 'password', 'xss@test.com')
ON CONFLICT (username) DO NOTHING;

-- Obtener el ID del usuario xss_tester
DO $$
DECLARE
    xss_user_id INTEGER;
BEGIN
    SELECT id INTO xss_user_id FROM users WHERE username = 'xss_tester';
    
    -- Tareas con diferentes tipos de payloads XSS
    INSERT INTO tasks (user_id, title, description, completed) VALUES 
    -- XSS b√°sico
    (xss_user_id, '<script>alert("XSS")</script>', 'Payload XSS b√°sico en t√≠tulo', false),
    (xss_user_id, 'XSS en descripci√≥n', '<script>alert("XSS en descripci√≥n")</script>', false),
    
    -- XSS con eventos
    (xss_user_id, '<img src=x onerror=alert("XSS")>', 'XSS con evento onerror', false),
    (xss_user_id, '<div onmouseover=alert("XSS")>Hover me</div>', 'XSS con evento onmouseover', false),
    (xss_user_id, '<input onfocus=alert("XSS") autofocus>', 'XSS con evento onfocus', false),
    
    -- XSS con diferentes tags
    (xss_user_id, '<iframe src="javascript:alert(''XSS'')"></iframe>', 'XSS con iframe', false),
    (xss_user_id, '<object data="javascript:alert(''XSS'')"></object>', 'XSS con object', false),
    (xss_user_id, '<embed src="javascript:alert(''XSS'')"></embed>', 'XSS con embed', false),
    
    -- XSS con encoding
    (xss_user_id, '&lt;script&gt;alert("XSS")&lt;/script&gt;', 'XSS con HTML entities', false),
    (xss_user_id, '%3Cscript%3Ealert("XSS")%3C/script%3E', 'XSS con URL encoding', false),
    
    -- XSS para bypass de filtros
    (xss_user_id, '<ScRiPt>alert("XSS")</ScRiPt>', 'XSS con case mixing', false),
    (xss_user_id, '<script>eval(String.fromCharCode(97,108,101,114,116,40,34,88,83,83,34,41))</script>', 'XSS con String.fromCharCode', false);
END $$;

-- ============================================================================
-- DATOS PARA TESTING DE IDOR (Insecure Direct Object Reference)
-- ============================================================================

-- Usuarios para testing de IDOR
INSERT INTO users (username, password, email) VALUES 
('idor_victim1', 'password', 'victim1@test.com'),
('idor_victim2', 'password', 'victim2@test.com'),
('idor_attacker', 'password', 'attacker@test.com')
ON CONFLICT (username) DO NOTHING;

-- Crear tareas sensibles para las v√≠ctimas
DO $$
DECLARE
    victim1_id INTEGER;
    victim2_id INTEGER;
    attacker_id INTEGER;
BEGIN
    SELECT id INTO victim1_id FROM users WHERE username = 'idor_victim1';
    SELECT id INTO victim2_id FROM users WHERE username = 'idor_victim2';
    SELECT id INTO attacker_id FROM users WHERE username = 'idor_attacker';
    
    -- Tareas sensibles de victim1
    INSERT INTO tasks (user_id, title, description, completed) VALUES 
    (victim1_id, 'Informaci√≥n confidencial', 'Esta informaci√≥n solo deber√≠a verla victim1', false),
    (victim1_id, 'Datos bancarios', 'Cuenta bancaria: 1234567890 (FAKE)', false),
    (victim1_id, 'Contrase√±as importantes', 'WiFi: password123, Email: secret456 (FAKE)', true),
    
    -- Tareas sensibles de victim2
    (victim2_id, 'Proyecto secreto', 'Detalles del proyecto confidencial de la empresa', false),
    (victim2_id, 'Informaci√≥n personal', 'Direcci√≥n: Calle Falsa 123, Tel√©fono: 555-0123 (FAKE)', false),
    (victim2_id, 'Notas privadas', 'Recordatorios personales que nadie m√°s deber√≠a ver', true),
    
    -- Tareas del atacante
    (attacker_id, 'Plan de ataque IDOR', 'Intentar acceder a tareas con IDs: ' || victim1_id || ', ' || victim2_id, false),
    (attacker_id, 'Testing IDOR', 'Probar modificar/eliminar tareas de otros usuarios', false);
END $$;

-- ============================================================================
-- DATOS PARA TESTING DE AUTENTICACI√ìN D√âBIL
-- ============================================================================

-- Usuarios con contrase√±as d√©biles para testing de fuerza bruta
INSERT INTO users (username, password, email) VALUES 
('weak_pass1', '123', 'weak1@test.com'),
('weak_pass2', 'password', 'weak2@test.com'),
('weak_pass3', 'admin', 'weak3@test.com'),
('weak_pass4', 'qwerty', 'weak4@test.com'),
('weak_pass5', '12345', 'weak5@test.com'),
('common_user', 'password123', 'common@test.com')
ON CONFLICT (username) DO NOTHING;

-- ============================================================================
-- DATOS PARA TESTING DE VALIDACI√ìN DE ENTRADA
-- ============================================================================

-- Usuario para testing de validaci√≥n
INSERT INTO users (username, password, email) VALUES 
('validation_tester', 'password', 'validation@test.com')
ON CONFLICT (username) DO NOTHING;

DO $$
DECLARE
    validation_user_id INTEGER;
BEGIN
    SELECT id INTO validation_user_id FROM users WHERE username = 'validation_tester';
    
    -- Tareas con datos extremos para testing de validaci√≥n
    INSERT INTO tasks (user_id, title, description, completed) VALUES 
    -- Strings muy largos
    (validation_user_id, REPEAT('A', 500), 'Testing t√≠tulo muy largo', false),
    (validation_user_id, 'Testing descripci√≥n larga', REPEAT('Lorem ipsum dolor sit amet. ', 100), false),
    
    -- Caracteres especiales
    (validation_user_id, '!@#$%^&*()_+-=[]{}|;:,.<>?', 'T√≠tulo con caracteres especiales', false),
    (validation_user_id, 'Caracteres Unicode', 'ÊµãËØï‰∏≠ÊñáÂ≠óÁ¨¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ üîíüõ°Ô∏èüíª', false),
    
    -- Strings vac√≠os y espacios
    (validation_user_id, '', 'T√≠tulo vac√≠o', false),
    (validation_user_id, '   ', 'T√≠tulo solo espacios', false),
    (validation_user_id, 'Descripci√≥n vac√≠a', '', false),
    
    -- N√∫meros y booleanos como strings
    (validation_user_id, '12345', '67890', false),
    (validation_user_id, 'true', 'false', false),
    (validation_user_id, 'null', 'undefined', false);
END $$;

-- ============================================================================
-- DATOS PARA TESTING DE CSRF
-- ============================================================================

-- Usuario para testing de CSRF
INSERT INTO users (username, password, email) VALUES 
('csrf_victim', 'password', 'csrf@test.com')
ON CONFLICT (username) DO NOTHING;

DO $$
DECLARE
    csrf_user_id INTEGER;
BEGIN
    SELECT id INTO csrf_user_id FROM users WHERE username = 'csrf_victim';
    
    -- Tareas que podr√≠an ser modificadas via CSRF
    INSERT INTO tasks (user_id, title, description, completed) VALUES 
    (csrf_user_id, 'Tarea importante', 'Esta tarea no deber√≠a ser modificada por CSRF', false),
    (csrf_user_id, 'Configuraci√≥n de seguridad', 'Cambios de configuraci√≥n sensibles', false),
    (csrf_user_id, 'Datos cr√≠ticos', 'Informaci√≥n que no deber√≠a ser eliminada', true);
END $$;

-- ============================================================================
-- RESUMEN DE DATOS DE TESTING CREADOS
-- ============================================================================

SELECT 'RESUMEN DE DATOS DE TESTING CREADOS:' as info;

SELECT 'Usuarios para SQL Injection:' as categoria, username, password 
FROM users WHERE username LIKE '%sqli%' OR username LIKE '%sql%'
UNION ALL
SELECT 'Usuarios para XSS:', username, password 
FROM users WHERE username LIKE '%xss%'
UNION ALL
SELECT 'Usuarios para IDOR:', username, password 
FROM users WHERE username LIKE '%idor%'
UNION ALL
SELECT 'Usuarios con contrase√±as d√©biles:', username, password 
FROM users WHERE username LIKE '%weak%' OR username = 'common_user'
UNION ALL
SELECT 'Usuarios para validaci√≥n:', username, password 
FROM users WHERE username LIKE '%validation%'
UNION ALL
SELECT 'Usuarios para CSRF:', username, password 
FROM users WHERE username LIKE '%csrf%';

-- Contar tareas por tipo de vulnerabilidad
SELECT 'TAREAS POR TIPO DE TESTING:' as info;
SELECT 
    CASE 
        WHEN u.username LIKE '%sqli%' THEN 'SQL Injection'
        WHEN u.username LIKE '%xss%' THEN 'XSS'
        WHEN u.username LIKE '%idor%' THEN 'IDOR'
        WHEN u.username LIKE '%validation%' THEN 'Validation'
        WHEN u.username LIKE '%csrf%' THEN 'CSRF'
        ELSE 'Other'
    END as tipo_testing,
    COUNT(t.id) as cantidad_tareas
FROM users u
LEFT JOIN tasks t ON u.id = t.user_id
WHERE u.username LIKE '%test%' OR u.username LIKE '%sqli%' OR u.username LIKE '%xss%' 
   OR u.username LIKE '%idor%' OR u.username LIKE '%validation%' OR u.username LIKE '%csrf%'
GROUP BY tipo_testing
ORDER BY cantidad_tareas DESC;